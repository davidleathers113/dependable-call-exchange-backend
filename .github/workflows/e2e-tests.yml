name: E2E Tests

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    # Run every 4 hours
    - cron: '0 */4 * * *'
  workflow_dispatch:

env:
  GO_VERSION: '1.24'

jobs:
  e2e-tests:
    name: E2E Test Suite - ${{ matrix.suite }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        suite:
          - auth
          - flow
          - financial
          - realtime
          - performance
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install dependencies
      run: |
        go mod download
        make test-e2e-deps
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Run E2E tests - ${{ matrix.suite }}
      env:
        DOCKER_BUILDKIT: 1
        COMPOSE_DOCKER_CLI_BUILD: 1
      run: |
        if [ "${{ matrix.suite }}" = "performance" ] && [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "Skipping performance tests on PR"
          exit 0
        fi
        make test-e2e-${{ matrix.suite }}
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-results-${{ matrix.suite }}
        path: |
          test-e2e-results.json
          coverage-e2e.out
    
    - name: Clean up containers
      if: always()
      run: make docker-clean

  e2e-performance-full:
    name: E2E Performance Tests (Full)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install dependencies
      run: |
        go mod download
        make test-e2e-deps
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Run performance tests
      run: make test-e2e-performance
    
    - name: Generate performance report
      run: |
        echo "# Performance Test Results" > performance-report.md
        echo "" >> performance-report.md
        echo "## Test Date: $(date)" >> performance-report.md
        echo "" >> performance-report.md
        echo "### Metrics" >> performance-report.md
        echo "" >> performance-report.md
        echo "| Metric | Target | Actual | Status |" >> performance-report.md
        echo "|--------|--------|--------|--------|" >> performance-report.md
        # Parse test output and generate report
        # This would need a proper parser script
    
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.md
    
    - name: Comment on PR (if triggered manually on PR)
      if: github.event_name == 'workflow_dispatch' && github.event.pull_request
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('performance-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

  e2e-coverage:
    name: E2E Coverage Report
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all test results
      uses: actions/download-artifact@v3
      with:
        path: test-results
    
    - name: Merge coverage reports
      run: |
        # Merge all coverage files
        echo "mode: atomic" > coverage-merged.out
        find test-results -name "coverage-e2e.out" -exec tail -n +2 {} \; >> coverage-merged.out
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage-merged.out
        flags: e2e
        name: e2e-coverage
    
    - name: Generate summary
      run: |
        echo "## E2E Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        for suite in auth flow financial realtime performance; do
          if [ -f "test-results/e2e-results-$suite/test-e2e-results.json" ]; then
            echo "| $suite | ✅ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| $suite | ❌ |" >> $GITHUB_STEP_SUMMARY
          fi
        done
