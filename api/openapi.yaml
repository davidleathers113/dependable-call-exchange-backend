openapi: 3.0.3
info:
  title: Dependable Call Exchange API
  version: 1.0.0
  description: Pay-per-call marketplace platform API
  contact:
    name: DCE Team
    email: team@dependablecallexchange.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.dependablecallexchange.com/v1
    description: Production server

security:
  - BearerAuth: []

paths:
  # Authentication endpoints
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new account
      operationId: register
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login to account
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh access token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Call management endpoints
  /calls:
    post:
      tags: [Calls]
      summary: Create a new call
      operationId: createCall
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCallRequest'
      responses:
        '201':
          description: Call created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Call'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
    get:
      tags: [Calls]
      summary: List calls
      operationId: listCalls
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/CallStatus'
        - name: from_date
          in: query
          schema:
            type: string
            format: date-time
        - name: to_date
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of calls
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallListResponse'

  /calls/{id}:
    get:
      tags: [Calls]
      summary: Get call by ID
      operationId: getCall
      parameters:
        - $ref: '#/components/parameters/CallId'
      responses:
        '200':
          description: Call details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Call'
        '404':
          $ref: '#/components/responses/NotFound'

  /calls/{id}/route:
    post:
      tags: [Calls]
      summary: Route call to seller
      operationId: routeCall
      parameters:
        - $ref: '#/components/parameters/CallId'
      responses:
        '200':
          description: Call routed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutedCall'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /calls/{id}/status:
    patch:
      tags: [Calls]
      summary: Update call status
      operationId: updateCallStatus
      parameters:
        - $ref: '#/components/parameters/CallId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCallStatusRequest'
      responses:
        '200':
          description: Call status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Call'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /calls/{id}/complete:
    post:
      tags: [Calls]
      summary: Complete a call
      operationId: completeCall
      parameters:
        - $ref: '#/components/parameters/CallId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteCallRequest'
      responses:
        '200':
          description: Call completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Call'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  # Bid profile endpoints
  /bid-profiles:
    post:
      tags: [Bidding]
      summary: Create bid profile
      operationId: createBidProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBidProfileRequest'
      responses:
        '201':
          description: Bid profile created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BidProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
    get:
      tags: [Bidding]
      summary: List bid profiles
      operationId: listBidProfiles
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: List of bid profiles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BidProfileListResponse'

  /bid-profiles/{id}:
    get:
      tags: [Bidding]
      summary: Get bid profile by ID
      operationId: getBidProfile
      parameters:
        - $ref: '#/components/parameters/BidProfileId'
      responses:
        '200':
          description: Bid profile details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BidProfile'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Bidding]
      summary: Update bid profile
      operationId: updateBidProfile
      parameters:
        - $ref: '#/components/parameters/BidProfileId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBidProfileRequest'
      responses:
        '200':
          description: Bid profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BidProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Bidding]
      summary: Delete bid profile
      operationId: deleteBidProfile
      parameters:
        - $ref: '#/components/parameters/BidProfileId'
      responses:
        '204':
          description: Bid profile deleted
        '404':
          $ref: '#/components/responses/NotFound'

  # Auction endpoints
  /auctions:
    post:
      tags: [Auctions]
      summary: Create auction
      operationId: createAuction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuctionRequest'
      responses:
        '201':
          description: Auction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auction'
        '400':
          $ref: '#/components/responses/BadRequest'

  /auctions/{id}:
    get:
      tags: [Auctions]
      summary: Get auction by ID
      operationId: getAuction
      parameters:
        - $ref: '#/components/parameters/AuctionId'
      responses:
        '200':
          description: Auction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auction'
        '404':
          $ref: '#/components/responses/NotFound'

  /auctions/{id}/complete:
    post:
      tags: [Auctions]
      summary: Complete auction
      operationId: completeAuction
      parameters:
        - $ref: '#/components/parameters/AuctionId'
      responses:
        '200':
          description: Auction completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  # Bid endpoints
  /bids:
    post:
      tags: [Bidding]
      summary: Place a bid
      operationId: placeBid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceBidRequest'
      responses:
        '201':
          description: Bid placed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bid'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  # Account endpoints
  /account/balance:
    get:
      tags: [Account]
      summary: Get account balance
      operationId: getBalance
      responses:
        '200':
          description: Account balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'

  /profile:
    get:
      tags: [Account]
      summary: Get user profile
      operationId: getProfile
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  # Compliance endpoints
  /compliance/dnc:
    post:
      tags: [Compliance]
      summary: Add number to DNC list
      operationId: addToDNC
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDNCRequest'
      responses:
        '201':
          description: Number added to DNC list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DNCEntry'
        '400':
          $ref: '#/components/responses/BadRequest'

  /compliance/dnc/{phone_number}:
    get:
      tags: [Compliance]
      summary: Check DNC status
      operationId: checkDNC
      parameters:
        - name: phone_number
          in: path
          required: true
          schema:
            type: string
            pattern: '^\+[1-9]\d{1,14}$'
      responses:
        '200':
          description: DNC status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DNCStatus'
    delete:
      tags: [Compliance]
      summary: Remove number from DNC list
      operationId: removeFromDNC
      parameters:
        - name: phone_number
          in: path
          required: true
          schema:
            type: string
            pattern: '^\+[1-9]\d{1,14}$'
      responses:
        '204':
          description: Number removed from DNC list
        '404':
          $ref: '#/components/responses/NotFound'

  /compliance/tcpa/hours:
    get:
      tags: [Compliance]
      summary: Get TCPA calling hours
      operationId: getTCPAHours
      responses:
        '200':
          description: TCPA calling hours
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TCPAHours'
    put:
      tags: [Compliance]
      summary: Set TCPA calling hours
      operationId: setTCPAHours
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetTCPAHoursRequest'
      responses:
        '200':
          description: TCPA hours updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TCPAHours'
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    CallId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    BidProfileId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    AuctionId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid

  schemas:
    # Authentication schemas
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
        - type
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          minLength: 8
          example: SecurePass123!
        name:
          type: string
          example: John Doe
        type:
          $ref: '#/components/schemas/AccountType'
        company_name:
          type: string
          example: Acme Corp

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: Refresh token
        expires_in:
          type: integer
          description: Token expiry in seconds
        user:
          $ref: '#/components/schemas/UserProfile'

    # Call schemas
    CreateCallRequest:
      type: object
      required:
        - from_number
        - to_number
      properties:
        from_number:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          example: '+14155551234'
        to_number:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          example: '+18005551234'
        direction:
          $ref: '#/components/schemas/CallDirection'

    UpdateCallStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/CallStatus'

    CompleteCallRequest:
      type: object
      required:
        - duration
      properties:
        duration:
          type: integer
          minimum: 1
          description: Call duration in seconds

    Call:
      type: object
      properties:
        id:
          type: string
          format: uuid
        from_number:
          type: string
        to_number:
          type: string
        status:
          $ref: '#/components/schemas/CallStatus'
        direction:
          $ref: '#/components/schemas/CallDirection'
        buyer_id:
          type: string
          format: uuid
        seller_id:
          type: string
          format: uuid
          nullable: true
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
          nullable: true
        duration:
          type: integer
          nullable: true
          description: Duration in seconds
        cost:
          $ref: '#/components/schemas/Money'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    RoutedCall:
      allOf:
        - $ref: '#/components/schemas/Call'
        - type: object
          properties:
            routing_decision:
              $ref: '#/components/schemas/RoutingDecision'

    CallListResponse:
      type: object
      properties:
        calls:
          type: array
          items:
            $ref: '#/components/schemas/Call'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # Bidding schemas
    CreateBidProfileRequest:
      type: object
      required:
        - criteria
        - active
      properties:
        criteria:
          $ref: '#/components/schemas/BidCriteria'
        active:
          type: boolean

    UpdateBidProfileRequest:
      type: object
      properties:
        criteria:
          $ref: '#/components/schemas/BidCriteria'
        active:
          type: boolean

    BidProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        seller_id:
          type: string
          format: uuid
        criteria:
          $ref: '#/components/schemas/BidCriteria'
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    BidProfileListResponse:
      type: object
      properties:
        bid_profiles:
          type: array
          items:
            $ref: '#/components/schemas/BidProfile'
        pagination:
          $ref: '#/components/schemas/Pagination'

    BidCriteria:
      type: object
      properties:
        geography:
          $ref: '#/components/schemas/GeoCriteria'
        call_type:
          type: array
          items:
            type: string
          example: ["sales", "support"]
        max_budget:
          type: number
          format: float
          minimum: 0
        keywords:
          type: array
          items:
            type: string
        time_restrictions:
          $ref: '#/components/schemas/TimeRestrictions'

    GeoCriteria:
      type: object
      properties:
        countries:
          type: array
          items:
            type: string
          example: ["US", "CA"]
        states:
          type: array
          items:
            type: string
          example: ["CA", "NY", "TX"]
        cities:
          type: array
          items:
            type: string

    TimeRestrictions:
      type: object
      properties:
        start_time:
          type: string
          pattern: '^([01]?[0-9]|2[0-3]):[0-5][0-9]$'
          example: "09:00"
        end_time:
          type: string
          pattern: '^([01]?[0-9]|2[0-3]):[0-5][0-9]$'
          example: "17:00"
        timezone:
          type: string
          example: "America/New_York"
        days_of_week:
          type: array
          items:
            type: string
            enum: [monday, tuesday, wednesday, thursday, friday, saturday, sunday]

    # Auction schemas
    CreateAuctionRequest:
      type: object
      required:
        - call_id
        - reserve_price
        - duration
      properties:
        call_id:
          type: string
          format: uuid
        reserve_price:
          type: number
          format: float
          minimum: 0
        duration:
          type: integer
          minimum: 1
          maximum: 300
          description: Auction duration in seconds

    Auction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        call_id:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/AuctionStatus'
        reserve_price:
          $ref: '#/components/schemas/Money'
        winning_bid:
          type: string
          format: uuid
          nullable: true
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # Bid schemas
    PlaceBidRequest:
      type: object
      required:
        - auction_id
        - amount
      properties:
        auction_id:
          type: string
          format: uuid
        amount:
          type: number
          format: float
          minimum: 0

    Bid:
      type: object
      properties:
        id:
          type: string
          format: uuid
        auction_id:
          type: string
          format: uuid
        call_id:
          type: string
          format: uuid
        buyer_id:
          type: string
          format: uuid
        seller_id:
          type: string
          format: uuid
        amount:
          $ref: '#/components/schemas/Money'
        status:
          $ref: '#/components/schemas/BidStatus'
        placed_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time

    # Account schemas
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        account_type:
          $ref: '#/components/schemas/AccountType'
        company_name:
          type: string
        permissions:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time

    BalanceResponse:
      type: object
      properties:
        balance:
          type: number
          format: float
        currency:
          type: string
          example: "USD"
        last_updated:
          type: string
          format: date-time

    # Compliance schemas
    AddDNCRequest:
      type: object
      required:
        - phone_number
        - reason
      properties:
        phone_number:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
        reason:
          type: string
          example: "consumer request"

    DNCEntry:
      type: object
      properties:
        phone_number:
          type: string
        reason:
          type: string
        list_type:
          type: string
          enum: [internal, federal, state]
        added_at:
          type: string
          format: date-time

    DNCStatus:
      type: object
      properties:
        phone_number:
          type: string
        is_dnc:
          type: boolean
        reason:
          type: string
          nullable: true
        list_type:
          type: string
          nullable: true
        added_at:
          type: string
          format: date-time
          nullable: true

    SetTCPAHoursRequest:
      type: object
      required:
        - start_time
        - end_time
        - timezone
      properties:
        start_time:
          type: string
          pattern: '^([01]?[0-9]|2[0-3]):[0-5][0-9]$'
          example: "09:00"
        end_time:
          type: string
          pattern: '^([01]?[0-9]|2[0-3]):[0-5][0-9]$'
          example: "20:00"
        timezone:
          type: string
          example: "America/New_York"

    TCPAHours:
      type: object
      properties:
        start_time:
          type: string
        end_time:
          type: string
        timezone:
          type: string
        updated_at:
          type: string
          format: date-time

    # Common schemas
    Money:
      type: object
      properties:
        amount:
          type: number
          format: float
        currency:
          type: string
          example: "USD"

    RoutingDecision:
      type: object
      properties:
        algorithm:
          type: string
          example: "round-robin"
        score:
          type: number
          format: float
        latency_ms:
          type: integer
          description: Routing decision time in milliseconds

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        total_pages:
          type: integer

    Error:
      type: object
      properties:
        code:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "Invalid request parameters"
        details:
          type: object
          additionalProperties: true

    # Enums
    AccountType:
      type: string
      enum: [buyer, seller, admin]

    CallStatus:
      type: string
      enum: [pending, queued, ringing, in_progress, completed, failed, canceled, no_answer, busy]

    CallDirection:
      type: string
      enum: [inbound, outbound]

    AuctionStatus:
      type: string
      enum: [active, completed, expired, canceled]

    BidStatus:
      type: string
      enum: [active, winning, outbid, expired, withdrawn]

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "VALIDATION_ERROR"
            message: "Invalid request parameters"

    Unauthorized:
      description: Unauthorized
      headers:
        WWW-Authenticate:
          schema:
            type: string
          example: 'Bearer realm="api"'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "UNAUTHORIZED"
            message: "Invalid or missing authentication token"

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "FORBIDDEN"
            message: "Insufficient permissions"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "NOT_FOUND"
            message: "Resource not found"

    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "CONFLICT"
            message: "Resource already exists"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "INTERNAL_ERROR"
            message: "An unexpected error occurred"

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Calls
    description: Call management and routing
  - name: Bidding
    description: Bid profiles and bidding operations
  - name: Auctions
    description: Real-time call auctions
  - name: Account
    description: Account and user management
  - name: Compliance
    description: Regulatory compliance and restrictions