package rest

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"runtime"
	"sync"
	"sync/atomic"
	"testing"
	"time"

	"github.com/davidleathers/dependable-call-exchange-backend/internal/domain/account"
	"github.com/davidleathers/dependable-call-exchange-backend/internal/domain/bid"
	"github.com/davidleathers/dependable-call-exchange-backend/internal/domain/call"
	"github.com/davidleathers/dependable-call-exchange-backend/internal/domain/values"
	"github.com/davidleathers/dependable-call-exchange-backend/internal/service/callrouting"
	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
)

// Performance requirements from project spec:
// - Call routing decisions: < 1ms
// - Bid processing: 100K bids/second throughput  
// - API response: < 50ms p99
// - Database queries: < 10ms for hot paths

// TestPerformanceCallRouting verifies < 1ms routing decision requirement
func TestPerformanceCallRouting(t *testing.T) {
	h, mocks := setupHandler(t)

	// Setup mock with minimal processing
	mocks.callSvc.RouteCallFunc = func(ctx context.Context, callID uuid.UUID) (*call.RoutingDecision, error) {
		return &call.RoutingDecision{
			CallID:         callID,
			WinningBuyerID: uuid.New(),
			WinningBidID:   uuid.New(),
			Algorithm:      "round-robin",
			DecisionTime:   time.Now(),
		}, nil
	}

	// Warm up
	for i := 0; i < 100; i++ {
		req := httptest.NewRequest("POST", "/api/v1/calls/"+uuid.New().String()+"/route", nil)
		req = req.WithContext(setUserContext(req.Context(), testBuyerID, "buyer"))
		req.Header.Set("Authorization", "Bearer test-token")
		
		w := httptest.NewRecorder()
		h.ServeHTTP(w, req)
	}

	// Measure routing performance
	const iterations = 1000
	durations := make([]time.Duration, iterations)

	for i := 0; i < iterations; i++ {
		req := httptest.NewRequest("POST", "/api/v1/calls/"+uuid.New().String()+"/route", nil)
		req = req.WithContext(setUserContext(req.Context(), testBuyerID, "buyer"))
		req.Header.Set("Authorization", "Bearer test-token")
		
		start := time.Now()
		w := httptest.NewRecorder()
		h.ServeHTTP(w, req)
		durations[i] = time.Since(start)
		
		require.Equal(t, http.StatusOK, w.Code)
	}

	// Calculate percentiles
	p50 := calculatePercentile(durations, 50)
	p95 := calculatePercentile(durations, 95)
	p99 := calculatePercentile(durations, 99)

	t.Logf("Call routing performance - p50: %v, p95: %v, p99: %v", p50, p95, p99)

	// Verify < 1ms requirement
	assert.Less(t, p99, 1*time.Millisecond, "p99 routing latency should be < 1ms")
}

// TestPerformanceBidProcessing verifies 100K bids/second throughput
func TestPerformanceBidProcessing(t *testing.T) {
	if testing.Short() {
		t.Skip("Skipping performance test in short mode")
	}

	h, mocks := setupHandler(t)

	// Setup mock with atomic counter
	var processedBids int64
	mocks.bidSvc.PlaceBidFunc = func(ctx context.Context, req PlaceBidRequest) (*bid.Bid, error) {
		atomic.AddInt64(&processedBids, 1)
		amount, _ := values.NewMoneyFromFloat(req.Amount, "USD")
		return &bid.Bid{
			ID:        uuid.New(),
			CallID:    uuid.MustParse(req.CallID),
			BuyerID:   testBuyerID,
			Amount:    amount,
			Status:    bid.StatusActive,
			PlacedAt:  time.Now(),
			ExpiresAt: time.Now().Add(5 * time.Minute),
		}, nil
	}

	// Create bid request template
	bidReq := PlaceBidRequest{
		CallID: uuid.New().String(),
		Amount: 0.10,
		Criteria: map[string]interface{}{
			"geography": map[string]interface{}{
				"countries": []string{"US"},
			},
			"call_type": []string{"sales"},
		},
	}
	bidBody, _ := json.Marshal(bidReq)

	// Run load test for 1 second
	ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)
	defer cancel()

	var wg sync.WaitGroup
	workers := 100 // Number of concurrent workers
	
	start := time.Now()
	for i := 0; i < workers; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			for {
				select {
				case <-ctx.Done():
					return
				default:
					req := httptest.NewRequest("POST", "/api/v1/bids", bytes.NewReader(bidBody))
					req.Header.Set("Content-Type", "application/json")
					req = req.WithContext(setUserContext(req.Context(), testBuyerID, "buyer"))
					req.Header.Set("Authorization", "Bearer test-token")
					
					w := httptest.NewRecorder()
					h.ServeHTTP(w, req)
				}
			}
		}()
	}

	wg.Wait()
	duration := time.Since(start)

	bidsPerSecond := float64(atomic.LoadInt64(&processedBids)) / duration.Seconds()
	t.Logf("Bid processing throughput: %.0f bids/second", bidsPerSecond)

	// While we can't achieve 100K/s in a unit test environment,
	// verify we can handle reasonable load
	assert.Greater(t, bidsPerSecond, float64(1000), "Should process at least 1000 bids/second in test")
}

// TestPerformanceAPIResponseTime verifies < 50ms p99 latency
func TestPerformanceAPIResponseTime(t *testing.T) {
	h, mocks := setupHandler(t)

	// Setup mocks for various endpoints
	setupPerformanceMocks(mocks)

	endpoints := []struct {
		name   string
		method string
		path   string
		body   interface{}
	}{
		{
			name:   "GET account",
			method: "GET",
			path:   "/api/v1/accounts/" + testBuyerID.String(),
		},
		{
			name:   "GET calls list",
			method: "GET",
			path:   "/api/v1/calls?limit=20",
		},
		{
			name:   "GET bid",
			method: "GET",
			path:   "/api/v1/bids/" + uuid.New().String(),
		},
		{
			name:   "POST call",
			method: "POST",
			path:   "/api/v1/calls",
			body: CreateCallRequest{
				FromNumber: "+12125551234",
				ToNumber:   "+13105559876",
				Direction:  "inbound",
			},
		},
	}

	for _, endpoint := range endpoints {
		t.Run(endpoint.name, func(t *testing.T) {
			const iterations = 100
			durations := make([]time.Duration, iterations)

			for i := 0; i < iterations; i++ {
				var req *http.Request
				if endpoint.body != nil {
					body, _ := json.Marshal(endpoint.body)
					req = httptest.NewRequest(endpoint.method, endpoint.path, bytes.NewReader(body))
					req.Header.Set("Content-Type", "application/json")
				} else {
					req = httptest.NewRequest(endpoint.method, endpoint.path, nil)
				}
				
				req = req.WithContext(setUserContext(req.Context(), testBuyerID, "buyer"))
				req.Header.Set("Authorization", "Bearer test-token")
				
				start := time.Now()
				w := httptest.NewRecorder()
				h.ServeHTTP(w, req)
				durations[i] = time.Since(start)
				
				assert.Equal(t, http.StatusOK, w.Code)
			}

			p50 := calculatePercentile(durations, 50)
			p95 := calculatePercentile(durations, 95)
			p99 := calculatePercentile(durations, 99)

			t.Logf("%s - p50: %v, p95: %v, p99: %v", endpoint.name, p50, p95, p99)

			// Verify < 50ms p99 requirement
			assert.Less(t, p99, 50*time.Millisecond, "%s p99 latency should be < 50ms", endpoint.name)
		})
	}
}

// TestPerformanceConcurrentLoad tests system under concurrent load
func TestPerformanceConcurrentLoad(t *testing.T) {
	if testing.Short() {
		t.Skip("Skipping performance test in short mode")
	}

	h, mocks := setupHandler(t)
	setupPerformanceMocks(mocks)

	// Metrics tracking
	var (
		totalRequests   int64
		successRequests int64
		errorRequests   int64
	)

	// Create different request types
	requestTypes := []func() (*http.Request, string){
		// GET requests
		func() (*http.Request, string) {
			req := httptest.NewRequest("GET", "/api/v1/accounts/"+testBuyerID.String(), nil)
			return req, "GET account"
		},
		func() (*http.Request, string) {
			req := httptest.NewRequest("GET", "/api/v1/calls?limit=10", nil)
			return req, "GET calls"
		},
		// POST requests
		func() (*http.Request, string) {
			body := CreateCallRequest{
				FromNumber: "+12125551234",
				ToNumber:   "+13105559876",
				Direction:  "inbound",
			}
			data, _ := json.Marshal(body)
			req := httptest.NewRequest("POST", "/api/v1/calls", bytes.NewReader(data))
			req.Header.Set("Content-Type", "application/json")
			return req, "POST call"
		},
		func() (*http.Request, string) {
			body := PlaceBidRequest{
				CallID: uuid.New().String(),
				Amount: 0.10,
			}
			data, _ := json.Marshal(body)
			req := httptest.NewRequest("POST", "/api/v1/bids", bytes.NewReader(data))
			req.Header.Set("Content-Type", "application/json")
			return req, "POST bid"
		},
	}

	// Run concurrent load for 5 seconds
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	var wg sync.WaitGroup
	workers := 50

	latencies := &sync.Map{} // map[string][]time.Duration

	start := time.Now()
	for i := 0; i < workers; i++ {
		wg.Add(1)
		go func(workerID int) {
			defer wg.Done()
			
			for {
				select {
				case <-ctx.Done():
					return
				default:
					// Pick random request type
					reqFunc := requestTypes[workerID%len(requestTypes)]
					req, reqType := reqFunc()
					
					req = req.WithContext(setUserContext(req.Context(), uuid.New(), "buyer"))
					req.Header.Set("Authorization", "Bearer test-token")
					
					reqStart := time.Now()
					w := httptest.NewRecorder()
					h.ServeHTTP(w, req)
					duration := time.Since(reqStart)
					
					atomic.AddInt64(&totalRequests, 1)
					
					if w.Code >= 200 && w.Code < 300 {
						atomic.AddInt64(&successRequests, 1)
					} else {
						atomic.AddInt64(&errorRequests, 1)
					}
					
					// Store latency
					val, _ := latencies.LoadOrStore(reqType, &[]time.Duration{})
					durations := val.(*[]time.Duration)
					*durations = append(*durations, duration)
				}
			}
		}(i)
	}

	wg.Wait()
	testDuration := time.Since(start)

	// Calculate metrics
	totalReqs := atomic.LoadInt64(&totalRequests)
	successReqs := atomic.LoadInt64(&successRequests)
	errorReqs := atomic.LoadInt64(&errorRequests)
	
	rps := float64(totalReqs) / testDuration.Seconds()
	successRate := float64(successReqs) / float64(totalReqs) * 100
	
	t.Logf("Load test results:")
	t.Logf("  Duration: %v", testDuration)
	t.Logf("  Total requests: %d", totalReqs)
	t.Logf("  Requests/second: %.2f", rps)
	t.Logf("  Success rate: %.2f%%", successRate)
	t.Logf("  Errors: %d", errorReqs)

	// Analyze latencies by request type
	latencies.Range(func(key, value interface{}) bool {
		reqType := key.(string)
		durations := *(value.(*[]time.Duration))
		
		if len(durations) > 0 {
			p50 := calculatePercentile(durations, 50)
			p95 := calculatePercentile(durations, 95)
			p99 := calculatePercentile(durations, 99)
			
			t.Logf("  %s - p50: %v, p95: %v, p99: %v (n=%d)", 
				reqType, p50, p95, p99, len(durations))
		}
		return true
	})

	// Assertions
	assert.Greater(t, successRate, 99.0, "Success rate should be > 99%")
	assert.Greater(t, rps, 100.0, "Should handle > 100 requests/second")
}

// TestPerformanceMemoryUsage tests for memory leaks
func TestPerformanceMemoryUsage(t *testing.T) {
	if testing.Short() {
		t.Skip("Skipping performance test in short mode")
	}

	h, mocks := setupHandler(t)
	setupPerformanceMocks(mocks)

	// Force GC and get baseline memory
	runtime.GC()
	var baseline runtime.MemStats
	runtime.ReadMemStats(&baseline)

	// Run requests
	const iterations = 10000
	for i := 0; i < iterations; i++ {
		// Vary request types
		switch i % 4 {
		case 0:
			req := httptest.NewRequest("GET", "/api/v1/accounts/"+uuid.New().String(), nil)
			req = req.WithContext(setUserContext(req.Context(), testBuyerID, "buyer"))
			req.Header.Set("Authorization", "Bearer test-token")
			w := httptest.NewRecorder()
			h.ServeHTTP(w, req)
			
		case 1:
			body := CreateCallRequest{
				FromNumber: "+12125551234",
				ToNumber:   "+13105559876",
				Direction:  "inbound",
			}
			data, _ := json.Marshal(body)
			req := httptest.NewRequest("POST", "/api/v1/calls", bytes.NewReader(data))
			req.Header.Set("Content-Type", "application/json")
			req = req.WithContext(setUserContext(req.Context(), testBuyerID, "buyer"))
			req.Header.Set("Authorization", "Bearer test-token")
			w := httptest.NewRecorder()
			h.ServeHTTP(w, req)
			
		case 2:
			req := httptest.NewRequest("GET", "/api/v1/calls?limit=100", nil)
			req = req.WithContext(setUserContext(req.Context(), testBuyerID, "buyer"))
			req.Header.Set("Authorization", "Bearer test-token")
			w := httptest.NewRecorder()
			h.ServeHTTP(w, req)
			
		case 3:
			body := PlaceBidRequest{
				CallID: uuid.New().String(),
				Amount: 0.10,
			}
			data, _ := json.Marshal(body)
			req := httptest.NewRequest("POST", "/api/v1/bids", bytes.NewReader(data))
			req.Header.Set("Content-Type", "application/json")
			req = req.WithContext(setUserContext(req.Context(), testBuyerID, "buyer"))
			req.Header.Set("Authorization", "Bearer test-token")
			w := httptest.NewRecorder()
			h.ServeHTTP(w, req)
		}
		
		// Periodic GC to simulate real conditions
		if i%1000 == 0 {
			runtime.GC()
		}
	}

	// Force GC and measure final memory
	runtime.GC()
	time.Sleep(100 * time.Millisecond) // Let GC finish
	
	var final runtime.MemStats
	runtime.ReadMemStats(&final)

	// Calculate memory growth
	heapGrowth := final.HeapAlloc - baseline.HeapAlloc
	heapGrowthMB := float64(heapGrowth) / (1024 * 1024)
	
	t.Logf("Memory usage after %d requests:", iterations)
	t.Logf("  Heap growth: %.2f MB", heapGrowthMB)
	t.Logf("  Goroutines: %d", runtime.NumGoroutine())

	// Check for memory leaks
	assert.Less(t, heapGrowthMB, 50.0, "Heap growth should be < 50MB for %d requests", iterations)
	assert.Less(t, runtime.NumGoroutine(), 100, "Should not leak goroutines")
}

// TestPerformancePagination tests pagination performance with large datasets
func TestPerformancePagination(t *testing.T) {
	h, mocks := setupHandler(t)

	// Setup mock to return large dataset
	mocks.callSvc.ListCallsFunc = func(ctx context.Context, filter CallFilter, pagination Pagination) ([]*call.Call, int, error) {
		calls := make([]*call.Call, pagination.Limit)
		for i := range calls {
			fromNum, _ := values.NewPhoneNumber("+12125551234")
			toNum, _ := values.NewPhoneNumber("+13105559876")
			calls[i] = &call.Call{
				ID:         uuid.New(),
				FromNumber: fromNum,
				ToNumber:   toNum,
				Status:     call.StatusCompleted,
				Direction:  call.DirectionInbound,
				StartTime:  time.Now().Add(-time.Duration(i) * time.Minute),
				CreatedAt:  time.Now(),
				UpdatedAt:  time.Now(),
			}
		}
		return calls, 10000, nil // Simulate 10k total records
	}

	pageSizes := []int{10, 50, 100, 500}
	
	for _, pageSize := range pageSizes {
		t.Run(fmt.Sprintf("page_size_%d", pageSize), func(t *testing.T) {
			durations := make([]time.Duration, 10)
			
			for i := 0; i < 10; i++ {
				req := httptest.NewRequest("GET", fmt.Sprintf("/api/v1/calls?page=%d&limit=%d", i+1, pageSize), nil)
				req = req.WithContext(setUserContext(req.Context(), testBuyerID, "buyer"))
				req.Header.Set("Authorization", "Bearer test-token")
				
				start := time.Now()
				w := httptest.NewRecorder()
				h.ServeHTTP(w, req)
				durations[i] = time.Since(start)
				
				assert.Equal(t, http.StatusOK, w.Code)
			}
			
			avgDuration := calculateAverage(durations)
			t.Logf("Page size %d - avg response time: %v", pageSize, avgDuration)
			
			// Larger pages should still respond quickly
			assert.Less(t, avgDuration, 100*time.Millisecond, 
				"Pagination with %d items should respond in < 100ms", pageSize)
		})
	}
}

// Benchmark tests for critical paths
func BenchmarkHandlerRouteCall(b *testing.B) {
	h, mocks := setupHandler(b)
	
	mocks.callSvc.RouteCallFunc = func(ctx context.Context, callID uuid.UUID) (*call.RoutingDecision, error) {
		return &call.RoutingDecision{
			CallID:         callID,
			WinningBuyerID: uuid.New(),
			WinningBidID:   uuid.New(),
			Algorithm:      "round-robin",
			DecisionTime:   time.Now(),
		}, nil
	}
	
	callID := uuid.New()
	req := httptest.NewRequest("POST", "/api/v1/calls/"+callID.String()+"/route", nil)
	req = req.WithContext(setUserContext(req.Context(), testBuyerID, "buyer"))
	req.Header.Set("Authorization", "Bearer test-token")
	
	b.ResetTimer()
	b.ReportAllocs()
	
	for i := 0; i < b.N; i++ {
		w := httptest.NewRecorder()
		h.ServeHTTP(w, req)
		
		if w.Code != http.StatusOK {
			b.Fatalf("unexpected status code: %d", w.Code)
		}
	}
}

func BenchmarkHandlerPlaceBid(b *testing.B) {
	h, mocks := setupHandler(b)
	
	mocks.bidSvc.PlaceBidFunc = func(ctx context.Context, req PlaceBidRequest) (*bid.Bid, error) {
		amount, _ := values.NewMoneyFromFloat(req.Amount, "USD")
		return &bid.Bid{
			ID:        uuid.New(),
			CallID:    uuid.MustParse(req.CallID),
			BuyerID:   testBuyerID,
			Amount:    amount,
			Status:    bid.StatusActive,
			PlacedAt:  time.Now(),
			ExpiresAt: time.Now().Add(5 * time.Minute),
		}, nil
	}
	
	bidReq := PlaceBidRequest{
		CallID: uuid.New().String(),
		Amount: 0.10,
		Criteria: map[string]interface{}{
			"geography": map[string]interface{}{
				"countries": []string{"US"},
			},
		},
	}
	body, _ := json.Marshal(bidReq)
	
	b.ResetTimer()
	b.ReportAllocs()
	
	for i := 0; i < b.N; i++ {
		req := httptest.NewRequest("POST", "/api/v1/bids", bytes.NewReader(body))
		req.Header.Set("Content-Type", "application/json")
		req = req.WithContext(setUserContext(req.Context(), testBuyerID, "buyer"))
		req.Header.Set("Authorization", "Bearer test-token")
		
		w := httptest.NewRecorder()
		h.ServeHTTP(w, req)
		
		if w.Code != http.StatusCreated {
			b.Fatalf("unexpected status code: %d", w.Code)
		}
	}
}

// Helper functions
func setupPerformanceMocks(mocks *SimpleMockServices) {
	// Account service
	mocks.accountSvc.GetByIDFunc = func(ctx context.Context, id uuid.UUID) (*account.Account, error) {
		money, _ := values.NewMoneyFromFloat(1000.00, "USD")
		email, _ := values.NewEmail("buyer@example.com")
		return &account.Account{
			ID:          id,
			Type:        account.TypeBuyer,
			Email:       email,
			CompanyName: "Test Company",
			Status:      account.StatusActive,
			Balance:     money,
			CreatedAt:   time.Now(),
			UpdatedAt:   time.Now(),
		}, nil
	}

	// Call service
	mocks.callSvc.GetCallFunc = func(ctx context.Context, id uuid.UUID) (*call.Call, error) {
		fromNum, _ := values.NewPhoneNumber("+12125551234")
		toNum, _ := values.NewPhoneNumber("+13105559876")
		return &call.Call{
			ID:         id,
			FromNumber: fromNum,
			ToNumber:   toNum,
			Status:     call.StatusCompleted,
			Direction:  call.DirectionInbound,
			StartTime:  time.Now(),
			CreatedAt:  time.Now(),
			UpdatedAt:  time.Now(),
		}, nil
	}

	mocks.callSvc.CreateCallFunc = func(ctx context.Context, req CreateCallRequest) (*call.Call, error) {
		fromNum, _ := values.NewPhoneNumber(req.FromNumber)
		toNum, _ := values.NewPhoneNumber(req.ToNumber)
		return &call.Call{
			ID:         uuid.New(),
			FromNumber: fromNum,
			ToNumber:   toNum,
			Status:     call.StatusPending,
			Direction:  call.Direction(req.Direction),
			StartTime:  time.Now(),
			CreatedAt:  time.Now(),
			UpdatedAt:  time.Now(),
		}, nil
	}

	mocks.callSvc.ListCallsFunc = func(ctx context.Context, filter CallFilter, pagination Pagination) ([]*call.Call, int, error) {
		// Return empty list for performance testing
		return []*call.Call{}, 0, nil
	}

	// Bid service
	mocks.bidSvc.GetBidFunc = func(ctx context.Context, id uuid.UUID) (*bid.Bid, error) {
		amount, _ := values.NewMoneyFromFloat(0.10, "USD")
		return &bid.Bid{
			ID:        id,
			CallID:    uuid.New(),
			BuyerID:   testBuyerID,
			Amount:    amount,
			Status:    bid.StatusActive,
			PlacedAt:  time.Now(),
			ExpiresAt: time.Now().Add(5 * time.Minute),
		}, nil
	}

	mocks.bidSvc.PlaceBidFunc = func(ctx context.Context, req PlaceBidRequest) (*bid.Bid, error) {
		amount, _ := values.NewMoneyFromFloat(req.Amount, "USD")
		return &bid.Bid{
			ID:        uuid.New(),
			CallID:    uuid.MustParse(req.CallID),
			BuyerID:   testBuyerID,
			Amount:    amount,
			Status:    bid.StatusActive,
			PlacedAt:  time.Now(),
			ExpiresAt: time.Now().Add(5 * time.Minute),
		}, nil
	}
}

func calculatePercentile(durations []time.Duration, percentile float64) time.Duration {
	if len(durations) == 0 {
		return 0
	}
	
	// Sort durations
	sorted := make([]time.Duration, len(durations))
	copy(sorted, durations)
	
	for i := 0; i < len(sorted); i++ {
		for j := i + 1; j < len(sorted); j++ {
			if sorted[i] > sorted[j] {
				sorted[i], sorted[j] = sorted[j], sorted[i]
			}
		}
	}
	
	index := int(float64(len(sorted)-1) * percentile / 100)
	return sorted[index]
}

func calculateAverage(durations []time.Duration) time.Duration {
	if len(durations) == 0 {
		return 0
	}
	
	var total time.Duration
	for _, d := range durations {
		total += d
	}
	
	return total / time.Duration(len(durations))
}
